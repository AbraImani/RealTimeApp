import streamlit as st
from . import gemini_client
from . import config
from . import utils

# Limite de caract√®res pour l'aper√ßu du texte soumis √† l'IA
MAX_CONTEXT_PREVIEW = 500

# @st.cache_data(show_spinner="G√©n√©ration du r√©sum√© en cours...") # Mise en cache possible mais attention si le texte change
def generate_summary(text: str,
                     level: str = "Moyen",
                     keywords: str | None = None,
                     model_name: str = config.DEFAULT_TEXT_MODEL_NAME) -> str | None:
    """
    G√©n√®re un r√©sum√© du texte fourni en utilisant Gemini.

    Args:
        text (str): Le texte √† r√©sumer.
        level (str): Le niveau de d√©tail souhait√© ("Court", "Moyen", "Long").
        keywords (str | None): Mots-cl√©s optionnels pour orienter le r√©sum√©.
        model_name (str): Le nom du mod√®le Gemini √† utiliser.

    Returns:
        str: Le r√©sum√© g√©n√©r√©, ou None en cas d'erreur.
    """
    if not text:
        st.warning("Le texte √† r√©sumer est vide.", icon="‚ö†Ô∏è")
        return None

    # V√©rifier si le client Gemini est pr√™t
    if not gemini_client.configure_gemini():
         st.error("Impossible de g√©n√©rer le r√©sum√© car le client Gemini n'est pas configur√©.", icon="‚ùå")
         return None


    # Construire le prompt pour Gemini
    prompt_parts = ["Voici un document :", "--- DEBUT DOCUMENT ---", text, "--- FIN DOCUMENT ---"]

    # Ajouter les instructions de r√©sum√©
    summary_instruction = config.SUMMARY_LEVELS.get(level, config.SUMMARY_LEVELS["Moyen"]) # Niveau par d√©faut si invalide
    prompt_parts.append(f"\nInstructions : G√©n√®re {summary_instruction} de ce document.")

    # Ajouter les mots-cl√©s si fournis
    if keywords:
        prompt_parts.append(f"Le r√©sum√© doit se concentrer particuli√®rement sur les aspects li√©s √† : '{keywords}'.")

    prompt_parts.append("\nFormat de sortie attendu : Uniquement le texte du r√©sum√©.")

    full_prompt = "\n".join(prompt_parts)

    # Afficher un aper√ßu du prompt (optionnel, pour le d√©bogage)
    # with st.expander("Voir le prompt envoy√© √† l'IA"):
    #    st.text(full_prompt[:MAX_CONTEXT_PREVIEW] + "...") # Limiter la taille affich√©e

    # Appeler l'API Gemini via le client
    summary = gemini_client.generate_text(
        prompt=full_prompt,
        model_name=model_name,
        temperature=0.2, # Temp√©rature plus basse pour des r√©sum√©s factuels
        max_output_tokens=1024 # Ajuster si n√©cessaire pour les r√©sum√©s longs
    )

    if summary:
        st.success("R√©sum√© g√©n√©r√© avec succ√®s !", icon="üìù")
        # Nettoyage simple (peut √™tre am√©lior√©)
        summary = summary.strip()
        # Supprimer les phrases introductives parfois ajout√©es par l'IA
        phrases_a_supprimer = ["Voici un r√©sum√©", "Le r√©sum√© demand√© est", "En r√©sum√©,"]
        for phrase in phrases_a_supprimer:
            if summary.lower().startswith(phrase.lower()):
                summary = summary[len(phrase):].strip().lstrip(':').strip()
        return summary
    else:
        # L'erreur est d√©j√† logg√©e par gemini_client.generate_text
        st.error("La g√©n√©ration du r√©sum√© a √©chou√©.", icon="‚ùå")
        return None

def display_summarizer_options(text_available: bool):
    """
    Affiche les options de r√©sum√© dans l'interface Streamlit.

    Args:
        text_available (bool): Indique si du texte est disponible pour le r√©sum√©.

    Returns:
        tuple: (level, keywords, summarize_button_pressed)
               level (str): Niveau de r√©sum√© choisi.
               keywords (str): Mots-cl√©s saisis.
               summarize_button_pressed (bool): True si le bouton "G√©n√©rer R√©sum√©" est cliqu√©.
    """
    st.subheader("2. R√©sum√© Automatique")

    if not text_available:
        st.info("Chargez un document pour activer les options de r√©sum√©.", icon="üìÑ")
        return None, None, False

    col1, col2 = st.columns([2, 3])

    with col1:
        summary_level = st.select_slider(
            "Longueur du r√©sum√© :",
            options=list(config.SUMMARY_LEVELS.keys()),
            value="Moyen", # Valeur par d√©faut
            key="summary_level_slider"
        )

    with col2:
        thematic_keywords = st.text_input(
            "Mots-cl√©s pour r√©sum√© th√©matique (optionnel) :",
            placeholder="Ex: intelligence artificielle, √©thique",
            key="summary_keywords"
        )

    summarize_button = st.button("G√©n√©rer le R√©sum√©", key="summarize_button", type="primary", use_container_width=True)

    return summary_level, thematic_keywords, summarize_button

# Exemple d'int√©gration dans app.py :
# if 'document_text' in st.session_state and st.session_state['document_text']:
#     level, keywords, button_pressed = display_summarizer_options(text_available=True)
#     if button_pressed:
#         summary = generate_summary(
#             st.session_state['document_text'],
#             level=level,
#             keywords=keywords
#         )
#         if summary:
#             st.session_state['current_summary'] = summary # Stocker pour affichage/export
#             st.markdown("### R√©sum√© G√©n√©r√©")
#             st.markdown(summary)
#         else:
#             # G√©rer l'√©chec
#             pass
# else:
#      display_summarizer_options(text_available=False)

# if 'current_summary' in st.session_state:
#      st.markdown("### R√©sum√© Actuel")
#      st.markdown(st.session_state['current_summary'])
#      # Ajouter bouton export/TTS ici
